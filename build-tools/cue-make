#!/bin/bash
help_msg="
Cue-Make script processes the current directory
recommend setting: alias cm=\"""cue-make""\"

creates local underscore files for debugging:
cue eval   => __eval_DIRNAME.cue
cue export => _DIRNAME.

all      : runs all commands
fmt,f    : cue format
eval,ev  : cue eval
vet,v    : cue vet
exp,ex,x : cue export\n
clean,c  : remove temp files
help,h   : displays this message
version  : displays script version

"
version="0.1.0"

# use these flags for debugging
# set -x
# set -v

# set exit on first failed command
set -e

# get the name of the working directory
working_dir=${PWD##*/}

eval_filename="__eval_${working_dir}.cue"
export_filename="_${working_dir}.yaml"

# cue export commands outputs the final, exportable output from the files
function cmd_cue_export() {
    printf "cue export . -o %q -f\n" "$export_filename" >&2
    cue export . -o "$export_filename" -f
}

# cue eval commands outputs the final, and incomplete values, including hidden values and definitions
function cmd_cue_eval() {
    printf "cue eval -a . -o %q -f\n" "$eval_filename" >&2
    cue eval -a . -o "$eval_filename" -f
}

# cue format commands formats the contents of the cue files (and their subdirectories)
function cmd_cue_fmt() {
    printf "cue fmt ./...\n" >&2
    cue fmt .
}

# the cue vet command  check the files for validity
function cmd_cue_vet() {
    printf "cue vet -c .\n" >&2
    cue vet -c .
}

# the cue-make clean
function cmd_cuemake_clean() {
    printf "rm %q\n" "$eval_filename" >&2
    rm "$eval_filename"
    printf "rm %q\n" "$export_filename" >&2
    rm "$export_filename"
}

function cmd_cuemake_help() {
    printf "%s\n" "$help_msg"
}

function cmd_cuemake_version() {
  printf "%s\n" "$version"
}


# command is the first argument (optional)
cmd_arg=$1

if [ $# = 0 ] || [ "$cmd_arg" == "all" ];  then
  cmd_cue_fmt
  cmd_cue_eval
  cmd_cue_vet
  cmd_cue_export
elif [ "$cmd_arg" == "fmt" ] || [ "$cmd_arg" == "f" ]; then
  cmd_cue_fmt
elif [ "$cmd_arg" == "eval" ] || [ "$cmd_arg" == "ev" ] || [ "$cmd_arg" == "e" ]; then
  cmd_cue_eval
elif [ "$cmd_arg" == "exp" ] || [ "$cmd_arg" == "ex" ] || [ "$cmd_arg" == "x" ]; then
  cmd_cue_export
elif [ "$cmd_arg" == "vet" ] || [ "$cmd_arg" == "v" ]; then
  cmd_cue_vet
elif [ "$cmd_arg" == "clean" ] || [ "$cmd_arg" == "c" ]; then
  cmd_cuemake_clean
elif [ "$cmd_arg" == "version" ] || [ "$cmd_arg" == "ver" ]; then
  cmd_cuemake_version
elif [ "$cmd_arg" == "help" ] || [ "$cmd_arg" == "h" ]; then
  cmd_cuemake_help
else
   printf "unknown cue-make command: %q \n" "$cmd_arg" >&2
   cmd_cuemake_help
fi
